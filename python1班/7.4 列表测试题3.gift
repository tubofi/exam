<<<<<<< HEAD
//n = [54, 45, 36, 63, 55]
//n.append(97)
::3-1:: 执行以下python程序后列表的长度将会变为几？ {
    =6
    ~5
    ~7
    ~4
}

//n = [22, 45, 63, 44, 55]
//n.insert(2, 56)
::3-2:: 执行以下python程序后列表中44这个元素的索引将会变为多少？ {
    =4
    ~3
    ~2
    ~5
}

//a = [56, 87, 56, 63, 55]
//print(a[3])
::3-3:: 执行以下python程序后输出的结果是什么？ {
    =63
    ~56
    ~55
    ~87
}

//a = ["python", "java", "go", "cpp", "rust"] 
//a.remove("python") 
//print(a[0]) 
::3-4:: 执行以下python程序后输出的结果是什么？ {
    =java
    ~python
    ~cpp
    ~go
}

//a = ["python", "java", "go", "cpp", "rust"] 
//a.pop(2)
//print(a[2]) 
::3-5:: 执行以下python程序后输出的结果是什么？ {
    =cpp
    ~java
    ~cpp
    ~go
}

//a = [1, 2, 3, 4, 5, 6] 
//a[5] = 5 
//print(a[5]) 
::3-6:: 运行以下程序，选择正确的输出结果 {
	=5
	~6
	~4
	~3
}

//a = [1, 2, 3, 4, 5, 6] 
//a[1] = 0 
//a[1] = 1 
//print(a[1]) 
::3-7:: 运行以下程序，选择正确的输出结果 {
	=1
	~2
	~3
	~a[1]
}

//a = [1, 2, 3, 4, 5, 6] 
//a[3] = a[5] 
//print(a[3]) 
::3-8:: 运行以下程序，选择正确的输出结果 {
	=6
	~4
	~3
	~5
}

//a = [1, 2, 3, 4, 5, 6] 
//a[3] = a[3] + 5 
//print(a[3]) 
::3-9:: 运行以下程序，选择正确的输出结果 {
	=9
	~4
	~5
	~6
}

//a = [1, 2, 3, 4, 5, 6] 
//b = a[3] 
//a[5] = b 
//print(a[5]) 
::3-10:: 运行以下程序，选择正确的输出结果 {
	=4
	~6
	~5
	~3
}

//a = [1, 2, 3, 4, 3, 6] 
//a.append(a[0]) 
//print(a[6]) 
::3-11:: 运行以下程序，选择正确的输出结果 {
	=1
	~6
	~3
	~4
}

//a = [1, 2, 3, 4, 3, 6] 
//a.append(a[3]) 
//print(a[3]) 
::3-12:: 运行以下程序，选择正确的输出结果 {
	=4
	~3
	~6
	~1
}

//a = [1, 2, 3, 4, 3, 6] 
//a.remove(2) 
//a.pop(2) 
//print(a[2]) 
::3-13:: 运行以下程序，选择正确的输出结果 {
	=3
	~2
	~4
	~6
}

//a = [22, 34, 45, 33, 22] 
//a.insert(0, 2) 
//print(a[0])
::3-14:: 运行以下程序，选择正确的输出结果 {
	=2
	~22
	~34
	~45
}

//a = [2, 34, 45, 33, 22] 
//a.insert(2, 0) 
//print(a[4]) 
::3-15:: 运行以下程序，选择正确的输出结果 {
	=33
	~45
	~22
	~0
}

//交换列表中的元素
=======
::3-1:: 根据以下解释，选择与之对应的列表操作方法 {
	=在列表的尾部添加一个元素 -> append()
	=在列表的指定位置插入一个元素 -> insert()
	=删除列表中的某个元素 -> remove()
	=删除列表指定位置上的某个元素 ->  pop()
}

::3-2:: 关于列表的说法，以下4个选项中正确的是 {
	=列表中的元素可以为任意类型
	~列表中至少要有一个元素
	~列表元素的索引从1开始
	~列表中不同元素之间用分号隔开
}

::3-3:: 关于列表的说法，以下4个选项中正确的是 {
	=列表中每个元素的索引号是唯一的
	~列表不能为空
	~列表中元素的索引号是随机排列的
	~列表中可以存在两个元素具有相同的索引号
}

//abc = [34, 36, 27, 68, 28, 95]
//print(abc[1])
::3-4:: 运行以下python程序后，输出的结果会是哪一项 {
	=36
	~34
	~27
	~abc
}

//c = [3, 4, 5, 6, 7, 8]
//c.insert(1, 20)
//print(c[1])
::3-5:: 分析以下程序，选择正确的输出结果 {
	=20
	~3
	~4
	~1
}

//sh = []
//for i in range(10000):
//sh.append(0)
::3-6:: 运行以下程序后，列表的长度将会变成多少 {
	=10000
	~9999
	~0
	~33
}


>>>>>>> 85f604e88a120ec262f6fb54eabeea387ffc7d41
